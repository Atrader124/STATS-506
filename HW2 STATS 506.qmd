---
title: "HW2"
author: "Yuanjie Xu"
format: html
embed-resources: true
code-overflow: wrap
editor: visual
---

link to my GitHub repository: https://github.com/Atrader124/STATS-506

## Problem 1 - Dice Game

a.  Version 1: Implement this game using a loop over the die rolls.

```{r}
dice_v1 <- function(x) {
  result <- -2 * x # the cost
  for(i in 1:x) {
    dice <- sample(1:6, 1)
    if(dice %% 2 == 0) { 
      # check if this roll wins
      result <- result + dice 
      # if wins, win the amount on the roll
    }
  }
  return(result)
}
```

Version 2: Implement this game using built-in R vectorized functions.

```{r}
dice_v2 <- function(x) {
  dice <- sample(1:6, x, replace = TRUE)
  win <- dice[dice %% 2 == 0]
  # the total amount wins
  result <- sum(win) - 2 * x
  return(result)
}
```

Version 3: Implement this by collapsing the die rolls into a single table().

```{r}
dice_v3 <- function(x) {
  dice <- sample(1:6, x, replace = TRUE)
  stats <- table(dice)
  win <- sum((as.numeric(names(stats)) %% 2 == 0) * as.numeric(names(stats)) * as.integer(stats))
  # the total amount wins
  result = win - 2 * x
  return(result)
}
```

Version 4: Implement this game by using one of the "apply" functions.

```{r}
dice_v4 <- function(x) {
  dice <- sample(1:6, x, replace = TRUE)
  win <- sapply(dice, function(y) if(y %% 2 == 0) return(y) else return(0))
  result <- sum(win) - 2 * x
  return(result)
}
```

b.  Demonstrate that all versions work. Do so by running each a few times, once with an input a 3, and once with an input of 3000.

```{r}
cat("Version 1 with input 3:", dice_v1(3), "\n")
cat("Version 1 with input 3000:", dice_v1(3000), "\n")
cat("Version 2 with input 3:", dice_v2(3), "\n")
cat("Version 2 with input 3000:", dice_v2(3000), "\n")
cat("Version 3 with input 3:", dice_v1(3), "\n")
cat("Version 3 with input 3000:", dice_v1(3000), "\n")
cat("Version 4 with input 3:", dice_v1(3), "\n")
cat("Version 4 with input 3000:", dice_v1(3000), "\n")
```

c.  Demonstrate that the four versions give the same result. Test with inputs 3 and 3000. (You may need to add a way to control the randomization.)

```{r}
set.seed(123)
cat("Version 1 with input 3:", dice_v1(3), "\n")
set.seed(123)
cat("Version 1 with input 3000:", dice_v1(3000), "\n")
set.seed(123)
cat("Version 2 with input 3:", dice_v2(3), "\n")
set.seed(123)
cat("Version 2 with input 3000:", dice_v2(3000), "\n")
set.seed(123)
cat("Version 3 with input 3:", dice_v3(3), "\n")
set.seed(123)
cat("Version 3 with input 3000:", dice_v3(3000), "\n")
set.seed(123)
cat("Version 4 with input 3:", dice_v4(3), "\n")
set.seed(123)
cat("Version 4 with input 3000:", dice_v4(3000), "\n\n")
```

d.  Use the microbenchmark package to clearly demonstrate the speed of the implementations. Compare performance with a low input (100) and a large input (10000). Discuss the results

```{r}
library(microbenchmark)
set.seed(123)
speed_100 <- microbenchmark(
  v1 = dice_v1(100),
  v2 = dice_v2(100),
  v3 = dice_v3(100),
  v4 = dice_v4(100),
  times = 100
)
# demonstrate speed when input = 100
set.seed(123)
speed_10000 <- microbenchmark(
  v1 = dice_v1(10000),
  v2 = dice_v2(10000),
  v3 = dice_v3(10000),
  v4 = dice_v4(10000),
  times = 100
)
# demonstrate speed when input = 10000
```

```{r}
print(speed_100)
```

```{r}
print(speed_10000)
```

The microbenchmark function from the microbenchmark package can calculate the code run time. So we can compare the speed between different R codes. This function enables us to find the fastest method to achieve functionality.

For a low input (100):

Version 2, using built-in R vectorized functions, is the fastest and stable method. This result may result from that the built-in R vectorized functions are easy to call and improve the performance. Version 1, using a loop, is the worst. It looks like a loop is not an effective method in this problem. Version 3 and version 4 have similar performance, with similar minimum, lq, mean and median. However, Version 3 has a much larger maximum than version 4, which may mean that version 4 is more stable than version 3. I believe version 3's larger range may caused by the difference of how many times we win in each try.

For a large input (10000):

Version 2, using built-in R vectorized functions, is still the fastest and stable method. Version 1, using a loop, is still the worst. The reason is explained above. Version 3 is the second fast and much faster and stabler than version 4. When it comes to large input, version 4 has a worse performance. The table function shows its advantage with a significantly better performance than the apply function.

e.  Do you think this is a fair game? Defend your decision with evidence based upon a Monte Carlo simulation.

I do not think this is a fair game. Let's assume that the input follows a discrete uniform distribution. So we assume that each simulation has the same input of 100. We choose version 2 to simulate because of its fastest speed. We repeat it X times, and calculate the mean of the results. If it is a fair game, the mean of the results should be close to zero. If the mean we finally get is between -1e-6 to 1e-6, we consider it is a fair game.

```{r}
M_C_simulation <- function(X) {
  results <- numeric(X)
  for(i in 1:X) {
    results[X] <- dice_v2(1000)
    # put X results in results
  }
  final_mean <- mean(results)
  return(final_mean)
}

X <- 10000
final_mean <- M_C_simulation(X)
print(final_mean)
if (abs(final_mean) <= 1e-6) {
  # find out whether final_mean is close enough to zero
  print("It is a fair game.")
} else {
  print("It is not a fair game.")
}
```

## Problem 2 - Linear Regression

a.  The names of the variables in this data are way too long. Rename the columns of the data to more reasonable lengths.

```{r}
df <- read.csv("C:/Users/user/Desktop/cars.csv",header = TRUE)
names(df) <- c("Height","Length","Width","Driveline","EngineType","Hybrid","ForwardGears","Transmission","Citympg","FuelType","Highwaympg","Classification","ID","Make","ModelYear","Year","Horsepower","Torque")
```

b.  Restrict the data to cars whose Fuel Type is "Gasoline".

```{r}
df_gasoline <- subset(df, FuelType == "Gasoline")
```

c.  Fit a linear regression model predicting MPG on the highway.

```{r}
model <- lm(Highwaympg ~ Horsepower + Torque + Length + Width + Height +  as.factor(Year), data=df_gasoline)
summary(model)
```

The coefficient for Horsepower is 0.01635. The coefficient for Horsepower represents if one unit Horsepower increases, how many units will be changed in Highway MPG on average, holding all other control variables constant. So if Horsepower increases 1 unit, Highway.MPG will increase 0.01635 units on average, holding all other control variables constant. According to the t-test, this effect is statistically significant.

d.  It seems reasonable that there may be an interaction between horsepower and torque. Refit the model (with lm) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.

```{r}
model_interaction <- lm(Highwaympg ~  Horsepower*Torque + Length + Width + Height + as.factor(Year), data=df_gasoline)
summary(model_interaction)
```

```{r}
print("Horsepower")
summary(df_gasoline$Horsepower)
print("Torque")
summary(df_gasoline$Torque)
```

```{r}
library(interactions)
interact_plot(model_interaction, pred = Horsepower, modx = Torque, interval = TRUE, at = list(Year = 2011), data = df_gasoline)
```

e.  Calculate beta from d. manually (without using lm) by first creating a proper design matrix, then using matrix algebra to estimate beta. Confirm that you get the same result as lm did prior.

```{r}
X <- model.matrix(~ Horsepower*Torque + Length + Width + Height + as.factor(Year), data=df_gasoline)
y <- df_gasoline$Highwaympg
beta_direct <- solve(t(X) %*% X) %*% t(X) %*% y
# manually calculate beta
beta_lm <- coef(model_interaction)
# use lm to calculate beta
print("beta_direct")
print(beta_direct)
print("beta_lm")
print(beta_lm)
```

``` stata
. cd C:\Users\user\Desktop
C:\Users\user\Desktop

. 
. clear all

. 
. import delimited "cars.csv", encoding(UTF-8)
(18 vars, 5,076 obs)

. 
. rename dimensionsheight height

. 
. rename dimensionslength length

. 
. rename dimensionswidth width

. 
. rename engineinformationdriveline driveline

. 
. rename engineinformationenginetype enginetype

. 
. rename engineinformationhybrid hybrid

. 
. rename engineinformationnumberofforward numberofforward

. 
. rename engineinformationtransmission transmission

. 
. rename fuelinformationcitympg citympg

. 
. rename fuelinformationfueltype fueltype

. 
. rename fuelinformationhighwaympg highwaympg

. 
. rename identificationclassification classification

. 
. rename identificationid id

. 
. rename identificationmake make

. 
. rename identificationmodelyear modelyear

. 
. rename identificationyear year

. 
. rename engineinformationenginestatistic horsepower

. 
. rename v18 torque

. 
. keep if fueltype == "Gasoline"
(485 observations deleted)

. 
. regress highwaympg horsepower torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
  highwaympg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
             |
        year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------

. 
. regress highwaympg c.horsepower##c.torque c.length c.width c.height i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

---------------------------------------------------------------------------------------
           highwaympg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
----------------------+----------------------------------------------------------------
           horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
               torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
                      |
c.horsepower#c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
                      |
               length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
                width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
               height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
                      |
                 year |
                2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
                2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
                2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
                      |
                _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
---------------------------------------------------------------------------------------

. 
. summarize(horsepower)

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
  horsepower |      4,591    267.4659    97.43199        100        638

. 
. summarize(torque)

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
      torque |      4,591    267.2196    101.3269         98        774

. interactplot, reverse
invalid line in style file anglestyle-ninety:
*label "90 degrees"
invalid line in style file anglestyle-ninety:
*label "90 degrees"

.
```
